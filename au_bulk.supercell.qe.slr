#!/bin/bash
#SBATCH -p shared
#SBATCH -A csd622
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=32
#SBATCH -t 1:00:00
#SBATCH -o au_bulk.supercell.qe.%A_%a.out
#SBATCH -J au_bulk.supercell.qe
#SBATCH --export=ALL
#SBATCH --array=1-4

#using slurm arrays to automate testing out different sizes of supercell
#ISSUE: currently, can't change ntasks dynamically based on # atoms, so we're just hoping 32 is good enough for all

jobname=$SLURM_JOB_NAME #name of file
output_format=${jobname}.${SLURM_ARRAY_JOB_ID} #what the output folder will be named

#load modules
module purge
module load slurm cpu/0.15.4  gcc/9.2.0  openmpi/3.1.6 quantum-espresso/6.7.0-openblas
module list

#define directories
#note: need separate temp folder for each task in array because QE temp files will get overwritten if they're all in same folder
# can result in "fortran runtime errors" for accessing files if not separate folder
temp_dir=/expanse/lustre/scratch/$USER/temp_project/qe/$output_format/${SLURM_ARRAY_TASK_ID} #the slurm working dir
out_dir=results/$output_format #the output dir
#code_dir=/expanse/lustre/scratch/$USER/temp_project/code/ #where a snapshot of current code will be stored

#create directories and copy files
cd $SLURM_SUBMIT_DIR
mkdir -p $temp_dir
mkdir -p $out_dir
#mkdir -p $code_dir

template_file=${jobname}.in


cp $BASH_SOURCE $out_dir/${output_format}.slr #save snapshot of sourecode at time of job run
cp $template_file $out_dir/${output_format}.in #save snapshot of input at time of job submission

cp supercell.py $temp_dir # copy supercell script to temp dir
cp $template_file $temp_dir #move to temp dir so we can operate on it
cd $temp_dir

size=${SLURM_ARRAY_TASK_ID} #get value for supercell size from slurm aray task id 
size_format=${jobname}.${size}_${size}_${size}

in_file=${size_format}.in
out_file=${size_format}.out

#find initial dimensions
#note: right now assumes cubic crystal, which should be fine for bulk
a=$(grep -n "\ba[ ]*=" $template_file | cut -d = -f 2 | cut -d , -f 1) #gets the value of a 
a_scaled=$(echo "$a*$size" | bc)
sed -E "s/\ba[ ]*=.*/a = ${a_scaled},/" $template_file > $in_file #replace value of a

#find initial coords startline
#coords_startline=$(( $(grep -n "\bATOMIC_POSITIONS" $in_file | cut -d : -f 1) + 1 ))
#coords_startline=$(( $coords_startline + 1 ))

tempfile=temp #create new file to hold atom coords
#this regex matches lines with 3 coords (with decimal points)
coords_regex="\b[ ]*[0-9]\.[0-9]*[ ]*[0-9]\.[0-9]*[ ]*[0-9]\.[0-9]*"
cat $in_file | grep -E "$coords_regex" > $tempfile 
cat $tempfile
python supercell.py $tempfile $size $size $size > temp2
sed -i "/$coords_regex/d" $in_file #delete old coords
sed -i '/\bATOMIC_POSITIONS/r temp2' $in_file #add new coords

#now replace the nat
num_atoms=$(cat temp2 | wc -l)
num_atoms=$(( $num_atoms - 1 )) #subtract 1 due to the extra newline
echo "Num atoms: $num_atoms"
sed -iE "s/\bnat[ ]*=.*/nat = ${num_atoms},/" $in_file

cat $in_file



# use tee instead of > so that we can get periodic updates 
srun --mpi=pmi2 -n $SLURM_NPROCS pw.x -npool 1 -input $in_file | tee $out_file
cp $in_file $out_file $SLURM_SUBMIT_DIR/$out_dir
